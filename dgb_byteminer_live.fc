

//==================//
//script Written by: cashfarm 29/01/21 Version 1

//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class BitShark : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://dgb.byteminer.live/r/59564")
            {
                new FaucetSetting(){Name="username",Display="DGB Faucetpay Address",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
				
               	
                
			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }



    //My DomainName
    string DomainName_String = "https://dgb.byteminer.live";
	//example - GoToUrl(DomainName_String);
    //==========//
	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		//CheckForPopupsEnabled = false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Digibyte - Power Mining";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {
 
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		
		return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {

		GoToUrl(DomainName_String);
	    Wait();
		//IsLoggedIn();
 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	

//========//
//DoLogin
//========//
 public override int DoLogin()
 {
	
	 
  //=====//
  //Login
  //=====//
  var ExitButton = ElementByClass("fa.fa-power-off"); 

  //if i NOT Login - go to Login Page
  if (!IsVisible(ExitButton))
  {
	   
        GoToUrl(DomainName_String); 
        Wait();		
        Wait(2);
		
        var EmailVAR = ElementByName("username");
        if (IsVisible(EmailVAR)) 
	    {
         SetText(EmailVAR, GetSetting("username"));
        }
		
		Wait(2);
		
        var PasswordVAR = ElementByName("password");	          
        if (IsVisible(PasswordVAR)) 
	    {
         SetText(PasswordVAR, GetPassword("password"));
        }
		
		Wait(2);	

		
        var ButtonLog = ElementByClass("cfi-button");		  
        if (IsVisible(ButtonLog)) 
	    {
         Click(ButtonLog);
        }	

		Wait();		

  } // end ExitButton
  //=====//
 
        
   return base.DoLogin();
 }
//========//
//DoLogin
//========//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {

	    
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
    return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
public override int DoSolveFaucet()
{
	
	 GoToUrl("https://dgb.byteminer.live/withdrawal/");
     var Amount = ElementByName("amount");
     SetText(Amount, "0.0010");   
     var WithBotton = ElementByClass("btn.btn-success");
     
	 Click(WithBotton);
      

      ad=true; //call to do success
	 
   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.DoSolveFaucet();
}
//=============//
//DoSolveFaucet
//=============//

	
	
	

    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {

	     

		return 0;
        }//end VOID_Template_Function
        //=================//	

	
} //public class dogeto
